options {
	
}

PARSER_BEGIN(XPathTransformer)

// place the transformer in a meaningful package
package nl.utwente.cs.pxml.transform.xpath;

/**
 * XPathTransformer - JavaCC-generated parser to transform an XPath-expression on an a regular context to an 
 * XQuery-expression of that same document with a probabilistic overlay.
 */
class XPathTransformer {
	
	public static void main(String... args) {
		// TODO: implement me!
	}
	
}

PARSER_END(XPathTransformer)

TOKEN : {

// string constant (document name)
  < STRING : ("\""(["A"-"z", ".", "0"-"9"])*"\"") >

// XPath step character
| < STEP : "/" >

// XPath axis names (copied from http://www.w3.org/TR/xpath/ section 2.2)
| < AXIS : 
	  "ancestor"
	| "ancestor-or-self"
	| "attribute"
	| "child"
	| "descendant"
	| "descendant-or-self"
	| "following"
	| "following-sibling"
	| "namespace"
	| "parent"
	| "preceding"
	| "preceding-sibling"
	| "self" >

// separator between axis name and node test
| < SEPARATOR : "::" >

// node names, required to start with a letter or _, followed by a word character (A-z, 0-9 or _)
| < NODENAME : (["A"-"z", "_"])(["0"-"9", "A"-"z", "_"])* >

// XPath expression for 'any'
| < NODEANY : "*" >

// XPath node types (copied from http://www.w3.org/TR/xpath/ section 3.7)
| < NODETYPE : 
	  "comment()"	
	| "text()"	
	| "processing-instruction()"	
	| "node()" >
}

/**
 * Matches a document reference of the form
 *     doc("docName.xml")
 * and returns the string literal (including the quotes).
 */
String document() :
{
	// use local variable docName to store document name token
	Token docName;
}
{
	"doc(" docName = < STRING > ")"
	{
		// return the string constant (including quotes)
		return docName.image;
	}
}

/**
 * Matches a single XPath axis step of the form
 *     /axis::nodeTest
 * and returns it as it was matched.
 */
String axisStep() :
{
	// use local variable axis to store the axis
	Token axis = null;
	// use local variable nodeTest to store the nodeTest on the axis
	Token nodeTest = null;
}
{
	< STEP >
	axis = < AXIS >
	< SEPARATOR >
	( nodeTest = < NODENAME > | < NODEANY > | < NODETYPE > )
	{
		// return the input, an XPath axis step
		return axis.image + "::" + nodeTest.image;
	}
}
