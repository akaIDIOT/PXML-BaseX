options {
	// force creation of instance-style parser
	STATIC = false;
}

PARSER_BEGIN(XPathTransformer)

// place the transformer in a meaningful package
package nl.utwente.cs.pxml.transform.xpath;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import nl.utwente.cs.pxml.util.CollectionUtils;

/**
 * XPathTransformer - JavaCC-generated parser to transform an XPath-expression on an a regular context to an 
 * XQuery-expression of that same document with a probabilistic overlay.
 */
class XPathTransformer {
	
	// store the currently supported axes for ease of use
	public static final List<String> SUPPORTED_AXES = Arrays.asList("child", "descendant");

	public static void main(String... args) {
		// do a sanity check (just a single XPath-expression supported for now)
		if (args.length != 1) {
			System.err.println("expected exactly 1 argument, terminating");
			System.exit(1);
		}

		// create a new transformer, reading from the only argument
		XPathTransformer transformer = new XPathTransformer(new StringReader(args[0]));
		// parse the input string, the result is a string containing the resulting XQuery-expression
		String code = "";
		try {
			 code = transformer.parseInput();
		} catch (ParseException e) {
			System.err.println("parser error at column " + e.currentToken.beginColumn + ", terminating");
			System.exit(1);
		}

		// print header
		System.out.println("(: transforming XPath expression " + args[0] + " :)\n");

		// print the actual generated code
		System.out.println(code);
	}
	
	public class AxisStep {
		
		public final String axis;
		public final String nodeTest;
		
		public AxisStep(String axis, String nodeTest) {
			this.axis = axis;
			this.nodeTest = nodeTest;
		}
		
		@Override
		public String toString() {
			return this.axis + "::" + this.nodeTest;
		}
	
	}
	
}

PARSER_END(XPathTransformer)

TOKEN : {
// string constant (document name)
  < STRING : ("\""(["a"-"z","A"-"Z",".","0"-"9"])*"\"") >

// XPath step character
| < STEP : "/" >

// XPath axis names (copied from http://www.w3.org/TR/xpath/ section 2.2)
| < AXIS : 
	  "ancestor"
	| "ancestor-or-self"
	| "attribute"
	| "child"
	| "descendant"
	| "descendant-or-self"
	| "following"
	| "following-sibling"
	| "namespace"
	| "parent"
	| "preceding"
	| "preceding-sibling"
	| "self" >

// separator between axis name and node test
| < SEPARATOR : "::" >

// node names, required to start with a letter or _, followed by a word character (A-z, 0-9 or _)
| < NODENAME : (["A"-"z", "_"])(["0"-"9", "A"-"z", "_"])* >

// XPath expression for 'any'
| < NODEANY : "*" >

// XPath node types (copied from http://www.w3.org/TR/xpath/ section 3.7)
| < NODETYPE : 
	  "comment()"	
	| "text()"	
	| "processing-instruction()"	
	| "node()" >
}

String parseInput() :
{
	String docName;
	AxisStep axisStep;
	List<String> expression = new ArrayList<String>();
}
{
	// start with a document name match
	docName = document()
	{
		// declare a namespace for the answers
		expression.add("declare namespace p = \"http://www.cs.utwente.nl/~keulen/pxml\";");
		// import PXML query module
		expression.add("import module namespace pxml = \"java:nl.utwente.cs.pxml.PXML\";");

		// declare some variables to be used
		expression.add("");
		expression.add("let $context     := doc(" + docName + ");"); // quotes are included in the document name
		expression.add("let $descriptors := \"\";");
	}

	// proceed with one or more axis steps
	(
		axisStep = axisStep()
		{
			// check if the axis is supported
			if (!SUPPORTED_AXES.contains(axisStep.axis)) {
				// TODO: throw more meaningful exception
				throw new RuntimeException("axis " + axisStep.axis + " is not supported");
			}

			// TODO: produce axis step XQuery code
		}
	)+
	{
		// TODO: produce result production XQuery code

		// return final
		return CollectionUtils.join(expression, "\n");
	}
}

/**
 * Matches a document reference of the form
 *     doc("docName.xml")
 * and returns the string literal (including the quotes).
 */
String document() :
{
	// use local variable docName to store document name token
	Token docName;
}
{
	"doc(" docName = < STRING > ")"
	{
		// return the string constant (including quotes)
		return docName.image;
	}
}

/**
 * Matches a single XPath axis step of the form
 *     /axis::nodeTest
 * and returns it as it was matched.
 */
AxisStep axisStep() :
{
	// use local variable axis to store the axis (initialized at null so javac won't complain about initialization)
	Token axis = null;
	// use local variable nodeTest to store the nodeTest on the axis
	Token nodeTest = null;
}
{
	< STEP >
	axis = < AXIS >
	< SEPARATOR >
	( nodeTest = < NODENAME > | < NODEANY > | < NODETYPE > )
	{
		// return the input, an XPath axis step
		return new AxisStep(axis.image, nodeTest.image);
	}
}
