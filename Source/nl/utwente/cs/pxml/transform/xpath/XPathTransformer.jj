options {
	
}

PARSER_BEGIN(XPathTransformer)

// place the transformer in a meaningful package
package nl.utwente.cs.pxml.transform.xpath;

/**
 * XPathTransformer - JavaCC-generated parser to transform an XPath-expression on an a regular context to an 
 * XQuery-expression of that same document with a probabilistic overlay.
 */
class XPathTransformer {
	
	public static void main(String... args) {
		// TODO: implement me!
	}
	
}

PARSER_END(XPathTransformer)

TOKEN :

// XPath step character
{ < STEP : "/" >

// XPath axis names (copied from http://www.w3.org/TR/xpath/ section 2.2)
| < AXIS : 
	  "ancestor"
	| "ancestor-or-self"
	| "attribute"
	| "child"
	| "descendant"
	| "descendant-or-self"
	| "following"
	| "following-sibling"
	| "namespace"
	| "parent"
	| "preceding"
	| "preceding-sibling"
	| "self" >

// separator between axis name and node test
| < SEPARATOR : "::" >

// node names, required to start with a letter or _, followed by a word character (A-z, 0-9 or _)
| < NODENAME : (["A"-"z", "_"])(["0"-"9", "A"-"z", "_"])* >

// XPath expression for 'any'
| < NODEANY : "*" >

// XPath node types (copied from http://www.w3.org/TR/xpath/ section 3.7)
| < NODETYPE : 
	  "comment()"	
	| "text()"	
	| "processing-instruction()"	
	| "node()" >
}
